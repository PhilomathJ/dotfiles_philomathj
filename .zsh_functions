# incorporate any dotfiles management functions
source $HOME/.dotfiles/dotfiles_functions 2>/dev/null

## combine mkdir & cd ##
mkcd () {
  mkdir "$1"
  cd "$1"
}

## Return the xinput ID of the given mouse name ##
mouse-id() {
	if [ -z $1 ]; then
		echo "Mouse name required"
		return 0
	fi

	local mouse_name=$1
	local id_string=$(xinput list | grep "$mouse_name.*pointer" | grep -o "id=.*")
	local id=$(expr substr $id_string 4 2)
	echo $id
	return 0
}

function largest () {
    echo "Listing the largest files/dirs in order..."
    du -h -x -s -- * | sort -r -h | head -20;
}

function hg() {
    history | grep "$1";
}

# Used to switch active AwesomeWM instance to different configs for active dev only
function awe() {
    # Acceptable arguments
    local acceptable_options=(mine first kosorin orig)

    local dir_main=$HOME/.config/awesome
    local dir_orig=$HOME/.config/awesome-orig
    local dir_kosorin=$HOME/.config/awesome-kosorin
    local dir_riced=$HOME/.config/awesome-riced
    local dir_riced_first=$HOME/.config/awesome-riced-first

    local keyfile="$HOME/.config/awesome/repo-key"
    local rice_key="awesome-riced"

    if [ -z "$1" ]; then
        echo "Argument required. (status ${acceptable_options[@]})"
        return 0
    fi

    # Check for existence of repo-key file
    if ! [ -f $keyfile ]; then
        print "Unable to determine repo-key. File $dir_main/$keyfile missing"
        print "Exiting"
        return 1
    fi

    case $1 in
        "status")
            print "Current active AwesomeWM repo is:"
            cat $dir_main/repo-key
            ;;
        "mine")
            # Overwrite the awesome dir with my own
            rsync -av --delete $dir_riced/ $dir_main
            print "AwesomeWM is now mine"
            ;;
        "first")
            # If active Awesome is riced, back it up
            if grep $rice_key "$keyfile"; then
                rsync -av --delete $dir_main/ $dir_riced
                print "Backed up $dir_main to $dir_riced"
            fi
            # Overwrite the awesome dir with kosorin's original riced
            rsync -av --delete $dir_riced_first/ $dir_main
            print "AwesomeWM is now riced-first"
            ;;
        "kosorin")
            # If active Awesome is riced, back it up
            if grep $rice_key "$keyfile"; then
                rsync -av --delete $dir_main/ $dir_riced
                print "Backed up $dir_main to $dir_riced"
            fi
            # Overwrite the awesome dir with kosorin's original riced
            rsync -av --delete $dir_kosorin/ $dir_main
            print "AwesomeWM is now kosorin"
            ;;
        "orig")
           # If active Awesome is riced, back it up
            if grep $rice_key "$keyfile"; then
                rsync -av --delete $dir_main/ $dir_riced
                print "Backed up $dir_main to $dir_riced"
            fi
            # Overwrite the awesome dir with the AwesomeWM original code
            rsync -av --delete $dir_orig/ $dir_main
            print "AwesomeWM is now orig"
            ;;
        *)
            print "Unknown argument: $1"
            print "Exiting"
            return 1
            ;;
    esac
}

# Create a Timeshift backup of the system including a comment
function tsbackup() {
    if [ -z "$1" ]; then
        echo "Argument required. (comment)"
        return 0
    fi

    comment="$1"
    sudo timeshift --create --comments "$comment"
}

# Rclone sync of Google Drive/Philomath folder and $HOME/GDrive
function syncGDrive() {
  rclone bisync \
  "gdrive:/" "$HOME/GDrive" \
  --compare size,modtime,checksum \
  --modify-window 1s \
  --create-empty-src-dirs \
  --drive-acknowledge-abuse \
  --drive-skip-gdocs \
  --drive-skip-shortcuts \
  --drive-skip-dangling-shortcuts \
  --metadata \
  --progress \
  --verbose \
  --log-file "$HOME/.config/rclone/logs/rclone-gdrive.log" \
  --track-renames \
  --fix-case \
  --resilient \
  --recover \
  --max-lock 2m \
  --check-access
}

# Rclone sync of Proton Drive/Philomath-sync folder and $HOME/ProtonDrive
function syncProtonDrive() {
  rclone bisync \
  "proton:Philomath-sync/" "$HOME/ProtonDrive" \
  --compare size,modtime,checksum \
  --modify-window 1s \
  --create-empty-src-dirs \
  --drive-acknowledge-abuse \
  --drive-skip-gdocs \
  --drive-skip-shortcuts \
  --drive-skip-dangling-shortcuts \
  --metadata \
  --progress \
  --verbose \
  --log-file "$HOME/.config/rclone/logs/rclone-proton.log" \
  --track-renames \
  --fix-case \
  --resilient \
  --recover \
  --max-lock 2m \
  --check-access
}
